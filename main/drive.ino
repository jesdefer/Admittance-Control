// 
// EPOS 24/5 have an internal bus termination which can be switched on with DIP-Switch 8 "ON"
// EPOS node ID = 2  (DIP-Switch) 0x602
// EPOS ‘CAN Bit rate’ (Index 0x2001 Sub-Index 0x00). Default Value 9 (automatic bit rate detection)
//
// Reminder CAN message structure:
// [Specifier, Index LB, Index HB, Subindex, Data [LLB (D0) LHB (D1) HLB (D2) HHB (D3)]]
//
// The three bits of the specifier byte are referred to as the client command specifier (cs), 
// which indicates what type of message is being transferred (i.e. read, write, and abort).
// CS = 0x22, no specification of the number of data bytes 
// CS = 0x2B, 2 data bytes in D0 to D1 int16
// CS = 0x2F, 2 data bytes in D0 int8
//
unsigned char enable_epos[8] = {0x2B, 0x40, 0x60, 0x00, 0x0F, 0x00, 0x00, 0x00};
unsigned char disable_epos[8] = {0x2B, 0x40, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00};
unsigned char set_preoperational[2] = {0x80, 0x00};
unsigned char set_operational[2] = {0x01, 0x00};
//
//******Motor specifications******//
unsigned char continuous_current_limit[8] = {0x2B, 0x10, 0x64, 0x01, 0x88, 0x13, 0x00, 0x00}; // 5000[mA]
unsigned char output_current_limit[8] = {0x2B, 0x10, 0x64, 0x02, 0x10, 0x27, 0x00, 0x00}; // 1000[mA]
unsigned char pole_pair_number[5] = {0x2F, 0x10, 0x64, 0x03, 0x05}; // 5 pairs
unsigned char max_motor_speed[8] = {0x2B, 0x10, 0x64, 0x04, 0x8B, 0x0B, 0x00, 0x00}; // 3000 [rpm]
unsigned char thermal_time_constant[8] = {0x2B, 0x10, 0x64, 0x05, 0x64, 0x00, 0x00, 0x00};// 100
unsigned char max_motor_accel[8] = {0x22, 0xC5, 0x60, 0x00, 0x40, 0x42, 0x0F, 0x00}; // 1000000 [rpm/s]
//
//******Control regulation parameters******//
unsigned char current_regulator_P_gain[8] = {0x22, 0xF6, 0x60, 0x01, 0xE8, 0x03, 0x00, 0x00}; // 1000
unsigned char current_regulator_I_gain[8] = {0x22, 0xF6, 0x60, 0x02, 0x0A, 0x00, 0x00, 0x00}; // 10
unsigned char speed_regulator_P_gain[8] = {0x22, 0xF9, 0x60, 0x01, 0xF4, 0x01, 0x00, 0x00}; // 500
unsigned char speed_regulator_I_gain[8] = {0x22, 0xF9, 0x60, 0x02, 0x64, 0x00, 0x00, 0x00 }; // 100
unsigned char speed_regulator_vel_ff[8] = {0x22, 0xF9, 0x60, 0x04, 0x00, 0x00, 0x00, 0x00}; // Velocity feedforward factor in speed regulator: 0
unsigned char speed_regulator_accel_ff[8] = {0x22, 0xF9, 0x60, 0x05, 0x00, 0x00, 0x00, 0x00}; // Acceleration feedforward factor in speed regulator: 0
unsigned char position_regulator_P_gain[8] = {0x22, 0xFB, 0x60, 0x01, 0x3C, 0x00, 0x00, 0x00 }; //50
unsigned char position_regulator_I_gain[8] = {0x22, 0xFB, 0x60, 0x02, 0x02, 0x00, 0x00, 0x00 }; //2
unsigned char position_regulator_D_gain[8] = {0x22, 0xFB, 0x60, 0x03, 0xC8, 0x00, 0x00, 0x00 }; //200
unsigned char position_regulator_vel_ff[8] = {0x22, 0xFB, 0x60, 0x04, 0x00, 0x00, 0x00, 0x00 }; // Velocity feedforward factor in position regulator: 0
unsigned char position_regulator_accel_ff[8] = {0x22, 0xFB, 0x60, 0x05, 0x00, 0x00, 0x00, 0x00 }; // Acceleration feedforward factor in position regulator: 0
//
//******Homing Mode******//
// Position units steps (quadcounts = 4 x Encoder Counts / Revolution)
// Velocity units rpm (Revolutions per Minute)
// Acceleration units rpm/s (Velocity Unit / Second)
unsigned char homing_method[5] = {0x2F, 0x98, 0x60, 0x00, 0xFD}; // The desired homing profile is Current Threshold Positive Speed (value -3)
unsigned char homing_speed_switch[8] = {0x22, 0x99, 0x60, 0x01, 0xF4, 0x01, 0x00, 0x00}; // 500 [rpm]
unsigned char homing_speed_zero_search[8] = {0x22, 0x99, 0x60, 0x02, 0xF4, 0x01, 0x00, 0x00}; // 500 [rpm]
unsigned char homing_acceleration[8] = {0x22, 0x9A, 0x60, 0x00, 0x88, 0x13, 0x00, 0x00}; // 5000 [rpm/s]
unsigned char home_offset[8] = {0x22, 0x7C, 0x60, 0x00, 0x0A, 0x00, 0x00, 0x00}; // 10[qc]
unsigned char homing_current_threshold[8] = {0x22, 0x80, 0x20, 0x00, 0xD0, 0x07, 0x00, 0x00}; // 2000 [mA]
unsigned char home_position[8] = {0x22, 0x62, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char set_homing_mode[8] = {0x2F, 0x60, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00};
unsigned char start_homing[8] = {0x2B, 0x40, 0x60, 0x00, 0x1F, 0x00, 0x00, 0x00};
//
//
//******Position Mode******//
// Position units steps (quadcounts = 4 x Encoder Counts / Revolution)
// Velocity units rpm (Revolutions per Minute)
// Acceleration units rpm/s (Velocity Unit / Second)
unsigned char set_min_position_limit[8] = {0x22, 0x7D, 0x60, 0x01, 0x7F, 0x7B, 0xE1, 0xFF}; // -300000 [qc] = 0xFFFB6C20 / -2000000 [qc] = 0xFFE17B80
unsigned char set_max_position_limit[8] = {0x22, 0x7D, 0x60, 0x02, 0x80, 0x84, 0x1E, 0x00}; // 300000 [qc] = 0x0493E0 / 2000000 [qc] = 0x1E8480
unsigned char set_max_following_error_position[8] = {0x22, 0x65, 0x60, 0x00, 0x80, 0x84, 0x1E, 0x00}; // 2000000 [qc] = 0x001E8480
unsigned char set_max_profile_velocity[8] = {0x22, 0x7F, 0x60, 0x00, 0xE8, 0x03, 0x00, 0x00}; // 1000[rpm] = 0x3E8.
unsigned char set_max_acceleration[8] = {0x22, 0xC5, 0x60, 0x00, 0x88, 0x13, 0x00, 0x00}; // 5000 [rpm/s] = 0x1388
unsigned char set_position_mode[8] = {0x2F, 0x60, 0x60, 0x00, 0xFF, 0x00, 0x00, 0x00};
//
//******Current Mode******//
unsigned char maximal_speed_in_current_mode[8] = {0x22, 0x10, 0x64, 0x04, 0xE8, 0x03, 0x00, 0x00};
unsigned char set_current_mode[8] = {0x2F, 0x60, 0x60, 0x00, 0xFD, 0x00, 0x00, 0x00};
//
//
////******PDO Configuration******////
// For PDO Configuration you have to be in the Pre-Operational state.
// In order to initiate simultaneous sampling of input values of all nodes, a periodically transmitted Sync message is required.
// The EPOS supports only Sync rates of 1.
unsigned char pdo_sync_message[1] = {0x00};
//
// Sending position to EPOS using RPDO1:
unsigned char rpdo1_parameter_COBID[8] = {0x22, 0x00, 0x14, 0x01, 0x02, 0x02, 0, 0}; // COB-ID used by RxPDO1: 0x202 = 0x00000200 + Node ID
unsigned char rpdo1_parameter_transmission_type[5] = {0x2F, 0x00, 0x14, 0x02, 0x01}; // Transmission type: The data is sampled and transmitted after the occurrence of the SYNC.
// The PDO mapping defines which application objects are transmitted within a PDO. 
// It describes the sequence and length of the mapped application objects.
unsigned char rpdo1_mapping_disable[8] = {0x22, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00}; // Disabling rxPDO1
unsigned char rpdo1_mapping_position[8] = {0x22, 0x00, 0x16, 0x01, 0x20, 0x00, 0x62, 0x20};
unsigned char rpdo1_mapping_current[8] = {0x22, 0x00, 0x16, 0x02, 0x10, 0x00, 0x30, 0x20};
unsigned char rpdo1_mapping_nobjects[8] = {0x22, 0x00, 0x16, 0x00, 0x02, 0x00, 0x00, 0x00}; // Enable the PDO by writing the value of the number of objects mapped.
//
// Reading position and velocity using TPDO1:
unsigned char tpdo1_parameter_COBID[8] = {0x22, 0x00, 0x18, 0x01, 0x82, 0x01, 0x00, 0x00};  // COB-ID used by TxPDO1: 0x182
unsigned char tpdo1_parameter_transmission_type[5] = {0x2F, 0x00, 0x18, 0x02, 0x01};
unsigned char tpdo1_mapping_disable[8] = {0x22, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char tpdo1_mapping_position[8] = {0x22, 0x00, 0x1A, 0x01, 0x20, 0x00, 0x64, 0x60};
unsigned char tpdo1_mapping_velocity[8] = {0x22, 0x00, 0x1A, 0x02, 0x20, 0x00, 0x6C, 0x60};
unsigned char tpdo1_mapping_nobjects[8] = {0x22, 0x00, 0x1A, 0x00, 0x02, 0x00, 0x00, 0x00};
//
// Reading statusword from EPOS using TPDO2:
unsigned char tpdo2_parameter_COBID[8] = {0x22, 0x01, 0x18, 0x01, 0x82, 0x02, 0x00, 0x00};  // COB-ID used by TxPDO1: 0x282
unsigned char tpdo2_parameter_transmission_type[5] = {0x2F, 0x01, 0x18, 0x02, 0x01};
unsigned char tpdo2_mapping_disable[8] = {0x22, 0x01, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char tpdo2_mapping_current[8] = {0x22, 0x01, 0x1A, 0x01, 0x10, 0x00, 0x78, 0x60};
unsigned char tpdo2_mapping_nobjects[8] = {0x22, 0x01, 0x1A, 0x00, 0x01, 0x00, 0x00, 0x00};

